schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type CategoryType implements Node {
  id: ID!
  ingredients(after: String, before: String, first: Int, last: Int, offset: Int): IngredientTypeConnection!
  name: String!
}

type CategoryTypeConnection {
  edges: [CategoryTypeEdge]!
  pageInfo: PageInfo!
}

type CategoryTypeEdge {
  cursor: String!
  node: CategoryType
}

scalar DateTime

type IngredientType implements Node {
  category: CategoryType!
  id: ID!
  name: String!
  pizza(after: String, before: String, first: Int, last: Int, offset: Int): PizzaTypeConnection!
}

type IngredientTypeConnection {
  edges: [IngredientTypeEdge]!
  pageInfo: PageInfo!
}

type IngredientTypeEdge {
  cursor: String!
  node: IngredientType
}

input LoginMutationInput {
  clientMutationId: String
  email: String!
  firstName: String!
  imageUrl: String!
}

type LoginMutationPayload {
  clientMutationId: String
  success: Boolean!
}

type Mutation {
  login(input: LoginMutationInput!): LoginMutationPayload @join__field(graph: PIZZA)
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PizzaType implements Node {
  id: ID!
  ingredients(after: String, before: String, first: Int, last: Int, offset: Int): IngredientTypeConnection!
  name: String!
  user: UserType!
  usersWithSamePizza: [UserWithSamePizzaType]
}

type PizzaTypeConnection {
  edges: [PizzaTypeEdge]!
  pageInfo: PageInfo!
}

type PizzaTypeEdge {
  cursor: String!
  node: PizzaType
}

type Query {
  allCategories(after: String, before: String, first: Int, last: Int, offset: Int): CategoryTypeConnection @join__field(graph: PIZZA)
  allPizzas(after: String, before: String, first: Int, last: Int, offset: Int): PizzaTypeConnection @join__field(graph: PIZZA)
  category(id: ID!): CategoryType @join__field(graph: PIZZA)
  pizza(id: ID!): PizzaType @join__field(graph: PIZZA)
  users(after: String, before: String, email: String, email_Icontains: String, email_Istartswith: String, first: Int, last: Int, offset: Int): UserTypeConnection @join__field(graph: PIZZA)
}

type UserType implements Node {
  admin: Boolean!
  dateJoined: DateTime!
  email: String!
  firstName: String!
  id: ID!
  imageUrl: String!
  isActive: Boolean!
  lastLogin: DateTime
  lastName: String!
  pizzas(after: String, before: String, first: Int, last: Int, offset: Int): PizzaTypeConnection!
  staff: Boolean!
}

type UserTypeConnection {
  edges: [UserTypeEdge]!
  pageInfo: PageInfo!
}

type UserTypeEdge {
  cursor: String!
  node: UserType
}

type UserWithSamePizzaType {
  pizza: String!
  user: UserType!
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  PIZZA @join__graph(name: "pizza" url: "http://localhost:8000/")
}
